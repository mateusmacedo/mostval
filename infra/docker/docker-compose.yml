version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: mostval-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mostval_sites}
      POSTGRES_USER: ${POSTGRES_USER:-mostval}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mostval123}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-mostval_sites,keycloak}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - mostval-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mostval} -d ${POSTGRES_DB:-mostval_sites}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mostval-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf --appendonly yes
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - mostval-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: mostval-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-mostval}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-mostval123}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-mostval_sites}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-mostval_cookie}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - mostval-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: mostval-keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER:-mostval}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-mostval123}
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_PROXY: "edge"
      KC_LOG_LEVEL: "INFO"
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - mostval-network
    depends_on:
      postgresql:
        condition: service_healthy
    command: ["start-dev"]


  # LocalStack AWS Emulator
  localstack:
    image: localstack/localstack:3.0
    container_name: mostval-localstack
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-0}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SERVICES=s3,sqs,sns,lambda,dynamodb,iam,sts,cloudformation,apigateway,route53,secretsmanager,ssm
      - PERSISTENCE=1
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOVE_CONTAINERS=true
      - LAMBDA_DOCKER_NETWORK=mostval-network
      - HOSTNAME_EXTERNAL=localstack
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test}
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mostval-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mostval-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mostval-network
    depends_on:
      - keycloak
      - localstack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  keycloak_data:
    driver: local
  localstack_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  mostval-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
